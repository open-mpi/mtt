#!/usr/bin/env perl
#
# Copyright (c) 2005-2006 The Trustees of Indiana University.
#                         All rights reserved.
# Copyright (c) 2006-2008 Cisco Systems, Inc.  All rights reserved.
# Copyright (c) 2006-2008 Sun Microsystems, Inc. All rights reserved.
# $COPYRIGHT$
#
# Additional copyrights may follow
#
# $HEADER$
#

BEGIN {

    use strict;

    use Data::Dumper;
    use Getopt::Long;
    use File::Basename;
    use Cwd;
    use Storable qw(dclone);
    use POSIX qw(strftime);
    use File::Spec;
    use Text::ParseWords;

    # Try to find the MTT files.  Assume that mtt executable is in the
    # base directory for the MTT files.  Try three methods:

    # 1. With no effort; see if we can just "require" and find MTT files.
    # 2. If $0 is a path, try adding that do @INC and try "require" again.
    # 3. Otherwise, search $ENV[PATH] for mtt, and when you find it, add
    #    that directory to @INC and try again.


    my $mtt_lib = cwd() . "/lib";
    use lib cwd() . "/lib";

    my $ret;
    eval "\$ret = require MTT::Version";
    if (1 != $ret) {
        my $dir = dirname($0);
        my @INC_save = @INC;

        # Change to the dir of $0 (because it might be a relative
        # directory) and add the cwd() to @INC
        my $start_dir = cwd();
        chdir($dir);
        chdir("..");
        $mtt_lib = cwd() . "/lib";
        push(@INC, $mtt_lib);
        chdir($start_dir);
        eval "\$ret = require MTT::Version";

        # If it didn't work, restore @INC and try looking for mtt in the
        # path

        if (1 != $ret) {
            @INC = @INC_save;
            my @dirs = split(/:/, $ENV{PATH});
            my $mtt = basename($0);
            foreach my $dir (@dirs) {

                # If we found the mtt executable, add the dir to @INC and
                # see if we can "require".  If require fails, restore @INC
                # and keep trying.
                if (-x "$dir/$mtt") {
                    chdir($dir);
                    chdir("..");
                    $mtt_lib = cwd() . "/lib";
                    push(@INC, $mtt_lib);
                    chdir($start_dir);
                    eval "\$ret = require MTT::Version";
                    if (1 == $ret) {
                        last;
                    } else {
                        @INC = @INC_save;
                    }
                }
            }
        }

        # If we didn't find them, die.
        die "Unable to find MTT support libraries"
            if (0 == $ret);
    }

    # Point to MTT support libraries in case a test needs them
    $ENV{MTT_LIB} = $mtt_lib;
}

# Now that @INC is setup, bring in the modules

use Config::IniFiles;
use MTT::Version;
use MTT::MPI;
use MTT::MPI::Get;
use MTT::MPI::Install;
use MTT::Test;
use MTT::Test::Get;
use MTT::Test::Build;
use MTT::Test::Run;
use MTT::Files;
use MTT::Messages;
use MTT::INI;
use MTT::Reporter;
use MTT::Defaults;
use MTT::Globals;
use MTT::FindProgram;
use MTT::Trim;
use MTT::DoCommand;
use MTT::Lock;
use MTT::Values;
use MTT::Timer;
use MTT::Util;
use MTT::Hooks;
use MTT::EnvModule;
use Filesys::DiskFree;

our @file_arg;
our $stdin_arg;
our $scratch_arg;
my $help_arg;
my $debug_arg;
my $verbose_arg;
my $no_execute_arg;
my $force_arg;
my $clean_start_arg;
my $mpi_get_arg;
my $mpi_install_arg;
my $mpi_phases_arg;
my $test_get_arg;
my $test_build_arg;
my $test_run_arg;
my $test_phases_arg;
my @section_arg;
my @no_section_arg;
my $no_reporter_arg;
my $trim_arg;
my $version_arg;
our $ini_args;
my $time_arg;
my $time_phases_arg;
my $time_cmd_arg;
my $trial_arg;
my $get_value_arg;

my @SAVE_ARGV = @ARGV;

&Getopt::Long::Configure("bundling");
my $ok = Getopt::Long::GetOptions("file|f=s" => \@file_arg,
                                  "" => \$stdin_arg,
                                  "scratch|s=s" => \$scratch_arg,
                                  "fast-scratch=s" => \$fast_scratch_arg,
                                  "help|h" => \$help_arg,
                                  "debug|d" => \$debug_arg,
                                  "verbose|v" => \$verbose_arg,
                                  "no-execute|n" => \$no_execute_arg,
                                  "force!" => \$force_arg,
                                  "clean-start" => \$clean_start_arg,
                                  "mpi-get!" => \$mpi_get_arg,
                                  "mpi-install!" => \$mpi_install_arg,
                                  "mpi-phases!" => \$mpi_phases_arg,
                                  "test-get!" => \$test_get_arg,
                                  "test-build!" => \$test_build_arg,
                                  "test-run!" => \$test_run_arg,
                                  "test-phases!" => \$test_phases_arg,
                                  "section=s" => \@section_arg,
                                  "no-section=s" => \@no_section_arg,
                                  "no-reporter" => \$no_reporter_arg,
                                  "trim!" => \$trim_arg,
                                  "version" => \$version_arg,
                                  "print-time|p" => \$time_arg,
                                  "print-phases-time" => \$time_phases_arg,
                                  "print-cmd-time" => \$time_cmd_arg,
                                  "trial!" => \$trial_arg,
                                  "get-value=s" => \$get_value_arg,
                                  );

if ($version_arg) {
    print "MTT Version $MTT::Version::Major.$MTT::Version::Minor\n";
    exit(0);
}

foreach my $file (@ARGV) {
    push(@file_arg, $file)
        if (-T $file and $file =~ /\.ini\s*$/);
}

# Get command-line overridden ini params
my $key_val_regexp = '([^=:]+)\=(.*)';
my $ARGV_JOINED = join(" ", @ARGV);
my @ARGV = &quotewords('\s+', 0, $ARGV_JOINED);

foreach my $arg (@ARGV) {

    if ($arg =~ /$key_val_regexp$/) {
        $ini_args->{$1}->{value} = $2;
        $ini_args->{$1}->{match} = '.';
    }

    # Check if an INI section was specified for the override
    # (See client/mtt --help for rundown of how INI param overriding
    # syntax works)
    if ($arg =~ /^([^=:]+):([^=]+)=/) {
        $ini_args->{$2}->{match} = $1;
    }

    $ARGV_JOINED =~ s/$token_pattern//;
}

my $over_section_name;
my $over_field_name;
my $over_value;
my @templates = ('test_run_','test_build_','test_get_','mpi_get_','mpi_install_','mpi_details_');
foreach my $key (keys(%ENV))
{
    if($key =~ /MTT_OPT/) {
        $over_value = $ENV{$key};
        if($key =~/__/) {
            $over_field_name=$';
            # emacs mode: ';
            $key = $`;
        } else {
            Warning("Syntax error in $key sipped\n");
            next;
        }
        if($key =~ /MTT_OPT_/) {
            $over_section_name=$';
            # emacs mode: ';
            $over_section_name = lc($over_section_name);
            foreach (@templates) {
                if($over_section_name =~ /$_/) {
                    my $new_template=$_;
                    $new_template =~ s/_/ /g;
                    chop($new_template);
                    $new_template .=': ';
                    $over_section_name =~ s/$_/$new_template/g;
                }
            }
            $ini_args->{$over_field_name}->{value} = $over_value;
            $ini_args->{$over_field_name}->{match} = $over_section_name;
        } else {
            Warning("Syntax error in $key sipped\n");
        }
    }
}

if (! @file_arg and ! $stdin_arg) {
    print "Must specify at least one --file argument or '-' for stdin.\n";
    $ok = 0;
}
if ($file_arg[0] eq "-" or $stdin_arg) {
    $stdin_arg = 1;
    $file_arg[0] = undef;
    open($file_arg[0], "-");
}

# Everything ok?

if (!$ok || $help_arg) {
    print("Command line error\n")
        if (!$ok);
    print "Options:
--file|-f <config_file>         Specify the configuration file
--scratch|-s <dir_name>         Scratch directory (global filsysyem)
                                Global filesystem where most MTT work is
                                performed
--fast-scratch <dir_name>       Fast scratch dir (e.g., a local filesystem)
                                This should be on a fast/local filesystem;
                                some portions of MTT may choose to use this
                                filesystem for IO-intensive operations
                                that are not persistent across
                                multiple MTT invocations
--help|-h                       This message
--debug|-d                      Output lots of debug messages
--verbose|-v                    Output some status / verbose messages
                                while processing
--no-execute|-n                 Do not execute any commands (developers only)
--print-cmd-time                Display the amount of time taken in each command
--print-phases-time             Display the amount of time taken in each phase
--print-time|-p                 Alias for --print-phases-time --print-cmd-time
--[no-]force                    Do steps even if they would not normally
                                be executed
--clean-start                   Clean the scratch directory from
                                past MTT invocations before running
--[no-]trial                    Use when testing your MTT client setup;
                                results that are generated and submitted
                                to the database are marked as \"trials\"
                                and are not included in normal
                                reporting.  Alternatively,
                                \"--no-trial\" can be specified to force
                                a \"normal\" submission (this is the
                                default).
--[no-]mpi-get                  Do the \"MPI get\" phase
--[no-]mpi-install              Do the \"MPI install\" phase
--[no-]mpi-phases               Alias for --mpi-get --mpi-install
--[no-]test-get                 Do the \"Test get\" phase
--[no-]test-build               Do the \"Test build\" phase
--[no-]test-run                 Do the \"Test run\" phase
--[no-]test-phases              Alias for --test-get --test-build --test-run
--[no-]trim                     Do the \"Trim\" phase
--[no-]section                  Do a specific section(s)
--get-value <section>,<param>   Print the value of the specified INI paramter
                                and exit
--no-reporter                   Do not invoke any MTT Reporter modules
field=value                     Replace parameter \"foo\" from the INI file
                                with the value \"bar\" (i.e., override the
                                INI file value)

For example, to set 'save_stdout_on_success' in every section:

    \$ client/mtt [...] save_stdout_on_success=1

To set 'intel_ompi_tests_fflags' in only the [test build: intel]
section (note the shell quoting to include the spaces in the value):

    \$ client/mtt [...] 'build,intel:intel_ompi_tests_fflags=-g -odd_ball_flag'

If no options other than --file, -f, or '-' are specified, MTT will
default to trying to make as much progress as possible (i.e., running
each of the phases as necessary).

The phases can be specified in positive or negative form.  You can
only specify positive or negative phases in a run; you cannot mix both
positive and negative phases in a single MTT run.

* If any phases are specified in the positive form, then only those
  phases will be run (e.g., \"--mpi-get --mpi-install\").
* If negative phases are specified, then thoses phases will *not* be
  run.

Use --section to run sections matching a pattern.  For example, the
following command will perform any section matching the
case-insensitive patttern \"intel\":

    \$ client/mtt [...] --section intel

The following performs only sections whose name matches the
case-insensitive pattterns \"run\" AND \"intel\" (so only the [Test
run: intel] section):

    \$ client/mtt [...] --section 'run;intel'

Whitespace separated pattern lists translate to logical OR. E.g., to
filter on sections NOT matching \"intel\" OR \"ibm\":

    \$ client/mtt [...] --no-section \"intel ibm\"

--[no]-section filters using regular expressions so you can embed
special regexp characters in the pattern such as '.' or '.*'.  E.g.,

    \$ client/mtt [...] --section \"test.run.*trivial\"

For more info, please visit <http://www.open-mpi.org/projects/mtt>
\n";

    exit($ok);
}

# Process --print-time arguments

if ($time_arg) {
    $time_phases_arg = 1;
    $time_cmd_arg = 1;
}

# Check debug

my $debug = ($debug_arg ? 1 : 0);
my $verbose = ($verbose_arg ? 1 : $debug);
my $warning = 1;
my $time_cmd = ($time_cmd_arg ? 1 : 0);
my $time_phases = ($time_phases_arg ? 1 : 0);
my $no_execute = ($no_execute_arg ? 1 : 0);
MTT::Messages::Messages($debug, $verbose, cwd(), $warning);
MTT::Messages::SetTextwrap();
MTT::Messages::Debug("Debug is $debug, Verbose is $verbose\n");
MTT::Messages::Verbose("*** MTT: $0 @SAVE_ARGV\n");
MTT::Messages::Verbose("*** Running on " . `hostname` ."\n");
MTT::DoCommand::DoCommand($time_cmd, $no_execute);

MTT::FindProgram::FindZeroDir();

########################################################################
# Params
########################################################################

# Convert INI files (or STDIN) to data structure(s)
our @ini_list = _process_ini_param(\@file_arg, $stdin_arg, \@section_arg, \@no_section_arg);

# Determine scratch from command-line or INI param
our $scratch_arg = _process_scratch_param("scratch", $scratch_arg, $ini_list[0]->{unfiltered}, ".");
$MTT::Globals::Values->{scratch_root} = $scratch_arg;
MTT::DoCommand::Chdir($scratch_arg);

my $fast_scratch_arg = _process_scratch_param("fast_scratch", $fast_scratch_arg, $ini_list[0]->{unfiltered}, $scratch_arg);
$MTT::Globals::Values->{fast_scratch_root} = $fast_scratch_arg;

Verbose("*** Main scratch tree: $scratch_arg\n");
Verbose("*** Fast scratch tree: $fast_scratch_arg\n");

# Determine --force from command-line or INI param
my $force_arg = _process_force_param($force_arg, $ini_list[0]->{unfiltered});

# If any of the --get-mpi, --install-mpi, --build-tests, or
# --run-tests are specified, then their defaults all go to 0.
# Otherwise, if none are specified, they all default to 1.

my $mpi_get = 1;
my $mpi_install = 1;
my $test_get = 1;
my $test_build = 1;
my $test_run = 1;
my $trim = 1;

if (defined($mpi_get_arg) || defined($mpi_install_arg) || defined($mpi_phases_arg) ||
    defined($test_get_arg) || defined($test_build_arg) || defined($test_phases_arg) ||
    defined($test_run_arg) || defined($trim_arg)) {

    # If anything is defined as "yes", then only do those

    if ($mpi_get_arg || $mpi_install_arg || $mpi_phases_arg ||
        $test_get_arg || $test_build_arg || $test_run_arg || $test_phases_arg ||
        $trim_arg) {

        $mpi_get = $mpi_install = $test_get = $test_build = $test_run = $trim = 0;

        $mpi_get = 1 if (defined($mpi_get_arg) && $mpi_get_arg) or
                        (defined($mpi_phases_arg) && $mpi_phases_arg);
        $mpi_install = 1 if (defined($mpi_install_arg) && $mpi_install_arg) or
                            (defined($mpi_phases_arg) && $mpi_phases_arg);
        $test_get = 1 if (defined($test_get_arg) && $test_get_arg) or
                         (defined($test_phases_arg) && $test_phases_arg);
        $test_build = 1 if (defined($test_build_arg) && $test_build_arg) or
                           (defined($test_phases_arg) && $test_phases_arg);
        $test_run = 1 if (defined($test_run_arg) && $test_run_arg) or
                         (defined($test_phases_arg) && $test_phases_arg);

        $trim = 1 if defined($trim_arg) && $trim_arg;
    }

    # Otherwise, just negate whatever option was negated

    else {
        $mpi_get = 0 if (defined($mpi_get_arg) && !$mpi_get_arg) or
                        (defined($mpi_phases_arg) && !$mpi_phases_arg);
        $mpi_install = 0 if (defined($mpi_install_arg) && !$mpi_install_arg) or
                            (defined($mpi_phases_arg) && !$mpi_phases_arg);
        $test_get = 0 if (defined($test_get_arg) && !$test_get_arg) or
                         (defined($test_phases_arg) && !$test_phases_arg);
        $test_build = 0 if (defined($test_build_arg) && !$test_build_arg) or
                           (defined($test_phases_arg) && !$test_phases_arg);
        $test_run = 0 if (defined($test_run_arg) && !$test_run_arg) or
                         (defined($test_phases_arg) && !$test_phases_arg);

        $trim = 0 if defined($trim_arg) && !$trim_arg;
    }
}


########################################################################
# Load up all old data
########################################################################

our $source_dir = "$scratch_arg/$MTT::Defaults::System_config->{source_subdir}";
our $install_dir = "$scratch_arg/$MTT::Defaults::System_config->{install_subdir}";
our $runs_data_dir = "$scratch_arg/$MTT::Defaults::System_config->{runs_data_subdir}";
our $mpi_install_dir = "$scratch_arg/$MTT::Defaults::System_config->{mpi_install_subdir}";

MTT::Hooks::on_start();

# If requested, do a clean start
if ($clean_start_arg)
{
    MTT::DoCommand::Cmd(1, "rm -rf $source_dir");
    MTT::DoCommand::Cmd(1, "rm -rf $install_dir");
    MTT::DoCommand::Cmd(1, "rm -rf $runs_data_dir");
    MTT::DoCommand::Cmd(1, "rm -rf $mpi_install_dir");
}

# Make directories
MTT::Files::mkdir($source_dir);
MTT::Files::mkdir($install_dir);
MTT::Files::mkdir($runs_data_dir);

# Load up all the MPI sources that this system has previously obtained
MTT::MPI::LoadSources($source_dir)
    if ($mpi_get || $mpi_install || $test_build || $test_run || $trim);

# Load up all the installs of the MPI sources
MTT::MPI::LoadInstalls($install_dir)
    if ($mpi_install || $test_build || $test_run || $trim);

# Load up the test sources for each install
MTT::Test::LoadSources($source_dir)
    if ($test_get || $test_build || $test_run || $trim);

# Load up the built tests for each install
MTT::Test::LoadBuilds($install_dir)
    if ($test_build || $test_run || $trim);

# Load up the run tests for each install
MTT::Test::LoadRuns($runs_data_dir)
    if ($test_run || $trim);

########################################################################
# Run the phases
########################################################################

foreach my $hash (@ini_list) {

    my $ini      = $hash->{filtered};
    my $ini_full = $hash->{unfiltered};
    my $file     = $hash->{filename};

    if (! $ini) {
        MTT::Messages::Warning("Could not read INI file: $file; skipping\n");
        next;
    }


    # Examine the [MTT] global defaults section.  We've already
    # determined the scratch_root, so pass it in so that it gets set
    # in the Globals hash.

    MTT::Globals::load($scratch_arg, $fast_scratch_arg, $ini_full);
    MTT::Messages::Messages($debug, $verbose, cwd(), $warning);
    MTT::Messages::SetTextwrap();

    $SIG{TERM} = sub {MTT::Util::term_handler($ini, $trim, $source_dir, $install_dir, $fast_scratch_arg, $scratch_arg, $no_reporter_arg, "SIGTERM");};
    $SIG{INT} = sub {MTT::Util::term_handler($ini, $trim, $source_dir, $install_dir, $fast_scratch_arg, $scratch_arg, $no_reporter_arg, "SIGINT");};
    $SIG{HUP} = sub {MTT::Util::term_handler($ini, $trim, $source_dir, $install_dir, $fast_scratch_arg, $scratch_arg, $no_reporter_arg, "SIGHUP");};
    $SIG{ABRT} = sub {MTT::Util::term_handler($ini, $trim, $source_dir, $install_dir, $fast_scratch_arg, $scratch_arg, $no_reporter_arg, "SIGABRT");};
    # Make the INI file globally accessible

    $MTT::Globals::Internals->{ini} = $ini_full;

    if ($get_value_arg) {
        _process_get_value_option($get_value_arg, $ini);
        next;
    }

    # Setup locks

    MTT::Lock::Init($ini);

    # execute on_start callback if exists
    _do_step($ini, "mtt", "before_mtt_start_exec");

    # Process setenv, unsetenv, prepend_path, and append_path

    my $config;
    $config->{setenv} = Value($ini, "mtt", "setenv");
    $config->{unsetenv} = Value($ini, "mtt", "unsetenv");
    $config->{prepend_path} = Value($ini, "mtt", "prepend_path");
    $config->{append_path} = Value($ini, "mtt", "append_path");
    my @save_env;
    ProcessEnvKeys($config, \@save_env);

    # load global env module(s)
    my $global_env_modules = Value($ini, "mtt", "env_module");
    if ($global_env_modules) {
        my @env_modules = MTT::Util::split_comma_list($global_env_modules);
        MTT::EnvModule::unload(@env_modules);
        MTT::EnvModule::load(@env_modules);
    }

    # Set the logfile, if specified

    my $logfile = MTT::Values::Value($ini, "mtt", "log_file", "logfile");
    if (defined($logfile)) {
        MTT::Messages::open_logfile($logfile);
    }

    # If "--trial" was specified, then set the "trail" flag to 1

    if (defined($trial_arg)) {
        $MTT::Globals::Values->{trial} = $trial_arg;
    }

    # Run the phases

    if (!$no_reporter_arg) {
        MTT::Reporter::Init($ini);
    }


    if ($mpi_get && !MTT::Util::time_to_terminate()) {
        &MTT::Timer::start($time_phases);
        MTT::MPI::Get::Get($ini, $source_dir, $force_arg);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: MPI Get", $time_phases, 1);
    }
    if ($mpi_install && !MTT::Util::time_to_terminate()) {
        &MTT::Timer::start($time_phases);
        MTT::MPI::Install::Install($ini, $ini_full, $install_dir, $force_arg);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: MPI Install", $time_phases, 1);
    }
    if ($test_get && !MTT::Util::time_to_terminate()) {
        &MTT::Timer::start($time_phases);
        MTT::Test::Get::Get($ini, $source_dir, $force_arg);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: Test Get", $time_phases, 1);
    }
    if ($test_build && !MTT::Util::time_to_terminate()) {
        &MTT::Timer::start($time_phases);
        MTT::Test::Build::Build($ini, $ini_full, $install_dir, $force_arg);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: Test Build", $time_phases, 1);
    }

    $MTT::Globals::Values->{save_intermediate_report} = $MTT::Globals::Values->{save_intermediate_report_enable};
    if ($test_run && !MTT::Util::time_to_terminate()) {
        &MTT::Timer::start($time_phases);
        MTT::Test::Run::Run($ini, $ini_full, $install_dir, $runs_data_dir,
                            $force_arg);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: Test Run", $time_phases, 1);
    }

    # Remove old sources, installs, and builds

    if ($trim) {
        &MTT::Timer::start($time_phases);
        MTT::Trim::Trim($ini, $source_dir, $install_dir);
        &MTT::Timer::stop();
        &MTT::Timer::print("Phase: Trim", $time_phases, 1);
    }

    # Shutdown the reporter

    #$MTT::Globals::Values->{save_intermediate_report}=undef;
    if (!$no_reporter_arg) {
        MTT::Reporter::Finalize();
    }

    # execute on_stop callback if exists
    _do_step($ini, "mtt", "after_mtt_start_exec");

    # Shut down locks

    MTT::Lock::Finalize($ini);

    # Whack the fast scratch area if it's unique/different than the
    # main scratch tree
    if ($fast_scratch_arg &&
        $MTT::Globals::Values->{delete_fast_scratch} &&
        $fast_scratch_arg ne $scratch_arg) {
        Verbose("Deleting fast scratch tree: $fast_scratch_arg\n");
        MTT::DoCommand::Cmd(1, "rm -rf $fast_scratch_arg");
    }

    # Close the log

    MTT::Messages::close_logfile();
}

# That's it!

MTT::Hooks::on_stop();

exit(0);

########################################################################
# Parameter processing subroutines
########################################################################

# Return a list of INI objects built off of the given INI
# files (or STDIN)
sub _process_ini_param {

    my $file_arg       = shift;
    my $stdin_arg      = shift;
    my $section_arg    = shift;
    my $no_section_arg = shift;

    my ($hash, @arr);

    foreach my $file (@$file_arg) {

        if (!$stdin_arg && ! -r $file) {
            MTT::Messages::Abort("Could not read file: $file");
        }

        my $orig_file;
        my $temp_file;

        # If the user pipes the INI to STDIN, then we need to create a copy of
        # an INI file for include_files expansion. This also means that the
        # user needs to use absolute path names for include_files
        if ($stdin_arg) {
            $orig_file = "stdin";
            $temp_file = MTT::Files::copyfile($file);
            $temp_file = MTT::INI::ExpandIncludeFiles($temp_file);
        } else {
            $orig_file = $file;
            $temp_file = MTT::INI::ExpandIncludeFiles($orig_file);
        }

        # Load up the ini file
        MTT::Messages::Debug("Reading ini file: $orig_file\n");
        my $unfiltered = new Config::IniFiles(-file => $temp_file,
                                       -nocase => 1,
                                       -allowcontinue => 1);

        # Check for syntax errors in the ini file
        if (! $unfiltered) {
            MTT::Messages::Abort("Syntax error in $orig_file: " .
                join("\n", @Config::IniFiles::errors));
        }

        # Check for duplicate entries in the ini file
        MTT::INI::ValidateINI($temp_file);

        # Whack the tmp file
        unlink($temp_file);

        # Override ini file params with those supplied at command-line
        $unfiltered = MTT::INI::OverrideINIParams($unfiltered, $ini_args);

        # Insert some predefined INI parameters
        $unfiltered = MTT::INI::InsertINIPredefines($unfiltered, $file);

        # Expand all the "include_section" parameters
        $unfiltered = MTT::INI::ExpandIncludeSections($unfiltered);

        # Keep an unfiltered version of the ini file for error checking
        my $filtered = dclone($unfiltered);

        # Filter ini sections at command line
        $filtered = MTT::INI::FilterINISections($filtered, $section_arg, $no_section_arg);

        undef $hash;

        # Push the ini struct onto the list
        $hash->{filtered}   = $filtered;
        $hash->{unfiltered} = $unfiltered;
        $hash->{filename}   = $file;

        push(@arr, $hash);
    }

    return @arr;
}

# Determine scratch directory
sub _process_scratch_param {
    my ($name, $scratch_option, $ini, $def_dir) = @_;
    my $scratch_arg;

    # The --scratch option overrides the INI scratch param
    if ($scratch_option) {
        $scratch_arg = $scratch_option;
    } else {
        $scratch_arg = Value($ini, "MTT", $name);
    }


    # See if we got a scratch root
    if (! $scratch_arg) {
        $scratch_arg = $def_dir;
    }
    MTT::Messages::Debug("$name: $scratch_arg\n");
    if (! -d $scratch_arg) {
        MTT::Files::mkdir($scratch_arg, 0777);
    }
    if (! -d $scratch_arg) {
        MTT::Messages::Abort("Could not make $name dir: $scratch_arg\n");
    }

    $scratch_arg = MTT::DoCommand::ResolveDir($scratch_arg);
    MTT::Messages::Debug("$name resolved: $scratch_arg\n");

    # Convert relative path to absolute path and expand "~"
    $scratch_arg = File::Spec->rel2abs(glob $scratch_arg);

    return $scratch_arg;
}

# Determine "force" setting
sub _process_force_param {

    my ($force_option, $ini) = @_;
    my $force_arg;

    # The --[no]-force option overrides the INI force param
    if (defined($force_option)) {
        $force_arg = $force_option;
    } else {
        $force_arg = Value($ini, "MTT", "force");
    }

    return $force_arg;
}

sub _process_get_value_option {
    my ($get_value_arg, $ini) = @_;
    my ($section, $parameter) = split(",", $get_value_arg);
    my $str = $ini->val($section, $parameter);
    my $ret = MTT::Values::Value($ini, $section, $parameter);
    _print_value($ret);
}

# Print a list or scalar
sub _print_value {
    my ($value) = @_;
    if (ref($value) =~ /ARRAY/) {
        print join("\n", @$value) . "\n";
    } else {
        print "$value\n";
    }
}

# Run cmd, specified in the non Test* sections
sub _do_step {
    my ($ini, $section,$param) = @_;
    my $cmd = $ini->val($section, $param);
    if (defined($cmd)) {
        my $x = MTT::DoCommand::RunStep(1, $cmd, -1, $ini, $section, $param);
        Verbose("  Output: $x->{result_stdout}\n")
    }
}
