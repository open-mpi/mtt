[MTT]
scratch = &getenv("HOME")/mtt-scratch
logfile =  &scratch_root()/mtt_output.log

[MPI Details: oshmem]
params = -mca btl_openib_warn_default_gid_prefix 0 -mca spml yoda -mca pml ob1
exec = <<EOF
export OSHMEM_HOME=&test_prefix()
export EXE=&test_executable_abspath()
set -x
$OSHMEM_HOME/bin/shmemrun -np &test_np() @params@ $EXE &test_argv()
EOF

#======================================================================
# MPI get phase
#======================================================================

[MPI get: oshmem]
mpi_details = oshmem
module = SCM
scm_module = SVN
scm_url = http://svn.open-mpi.org/svn/ompi/trunk

#======================================================================
# Install MPI phase
#======================================================================

[MPI Install: oshmem_gcc]
mpi_get = oshmem
ompi_compiler_name = gnu
ompi_configure_arguments = --enable-mpirun-prefix-by-default --enable-orterun-prefix-by-default --with-openib --with-pmi --enable-oshmem --with-oshmem-param-check
module = OMPI
ompi_make_all_arguments = -j &get_processor_count()
ompi_autogen = 1
save_stdout_on_success = 1
merge_stdout_stderr = 1

#======================================================================
# Test get phase
#======================================================================

[Test get: oshmem_test_suite]
module = SCM
scm_module = SVN
scm_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/openshmem-release-1.0d/
scm_clone_all = 1
scm_username = ...put in your username here...
scm_password = ...put in your password here...

#======================================================================
# Test build phase
#======================================================================

[Test build: oshmem_test_suite]
include_files = openshmem_tests_patch.ini
test_get = oshmem_test_suite
save_stdout_on_success = 1
merge_stdout_stderr = 1
module = Shell

shell_build_command = <<EOT

cd examples
cat <<EOTT > ./patch
&get_ini_val('Test build: oshmem_test_suite','shmem_2dheat_patch')
EOTT
patch shmem_2dheat.c ./patch
sed -i 's/#include <stdio.h>/#include <stdio.h>\n#include <sys\/time.h>\n/g' ./shmem_daxpy.c
cd ../feature_tests/C
cat <<EOTT > ./patch
&get_ini_val('Test build: oshmem_test_suite','shmem_zeroget_patch')
EOTT
patch test_shmem_zero_get.c ./patch
sed -i 's/#include <stdio.h>/#include <stdio.h>\n#include <sys\/time.h>\n/g' ./test_shmem_synchronization.c

cd performance_tests/micro_benchmarks
sed -i 's/#include <stdio.h>/#include <stdio.h>\n#include <sys\/time.h>\n/g' ./barrier_performance.c
cd ../../

make examples CC=&test_prefix_pretty()/bin/shmemcc
make C_feature_tests CC=&test_prefix_pretty()/bin/shmemcc
make micro_bench CC=&test_prefix_pretty()/bin/shmemcc
make F_feature_tests SHMEM_F90=&test_prefix_pretty()/bin/shmemfort
EOT


#======================================================================
# Test Run phase
#======================================================================

[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
specify_module = Simple
save_stdout_on_pass = 1
stdout_save_lines = -1
merge_stdout_stderr = 1
np = &env_max_procs()

[oshmem_test_suite_common]
test_build = oshmem_test_suite
include_section = Test run
np = 2
timeout = 00:02:00

[Test run: oshmem_test_suite_examples]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables("examples/")
simple_first:argv = &enumerate("10 10")
skipped = 0
np = 4
timeout = 00:02:00

[Test run: oshmem_test_suite_C_feature_tests]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables("feature_tests/C/")

[Test run: oshmem_test_suite_Fortran_accessibility]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*[.]x$', "feature_tests/Fortran/accessibility")

[Test run: oshmem_test_suite_Fortran_alloc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*shpalloc_0[^3].*[.]x$', "feature_tests/Fortran/alloc")

[Test run: oshmem_test_suite_Fortran_atomic_add]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('add_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_cswap]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('cswap_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_fadd]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('test_shmem_fadd.*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_finc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('finc_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_inc]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('inc_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_swap]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('swap_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_barrier]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*barrier.*_0[^3].*[.]x$', "feature_tests/Fortran/barrier")

[Test run: oshmem_test_suite_Fortran_collect]
simple_first:tests = &find_executables_regexp('.*collect_0[^4].*[.]x$', "feature_tests/Fortran/collect")
include_section = oshmem_test_suite_common

[Test run: oshmem_test_suite_Fortran_reductions]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*[.]x$', "feature_tests/Fortran/reductions")

[Test run: oshmem_test_suite_Fortran_transfer]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('test_shmem_[^pi][^ug].*[.]x$', "feature_tests/Fortran/transfer")

[Test run: oshmem_test_suite_Fortran_transfer_put]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('put_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_iget]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('iget_0[^45].*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_synchronization]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('(test_shmem_lock.x)|(test_shmem_synchronization.x)', "feature_tests/Fortran")

[Test run: oshmem_test_suite_Fortran_alloc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*shpalloc_03.*[.]x$', "feature_tests/Fortran/alloc")

[Test run: oshmem_test_suite_Fortran_atomic_add_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('add_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_cswap_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('cswap_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_finc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('finc_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_inc_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('inc_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_atomic_swap_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('swap_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_put_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('put_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_transfer_iget_fail]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 255))
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('iget_0(4|5).*[.]x$', "feature_tests/Fortran/atomic")

[Test run: oshmem_test_suite_Fortran_barrier_timeout]
include_section = oshmem_test_suite_common
simple_first:tests = &find_executables_regexp('.*barrier.*_03.*[.]x$', "feature_tests/Fortran/barrier")

[Test run: oshmem_test_suite_Fortran_collect_timeout]
simple_first:tests = &find_executables_regexp('.*collect_04.*[,]x$', "feature_tests/Fortran/collect")
include_section = oshmem_test_suite_common

[Test run: oshmem_test_suite_performance_tests]
include_section = Test run
test_build = oshmem_test_suite
simple_first:tests = &find_executables_regexp('(.*barrier.*)|(.*broadcast.*)|(.*get.*)|(.*put.*)',"performance_tests/micro_benchmarks/")
skipped = 0
timeout = 00:10:00

#======================================================================
# Reporter phase
#======================================================================

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

textfile_summary_header = <<EOT
Hostname: &shell("hostname")
uname: &shell("uname -a")
Username: &shell("who am i")
EOT

textfile_summary_footer = <<EOT
Detailed report at &get_ini_val("mtt","scratch_root")
EOT
textfile_detail_header = oshmem from ompi trunk
textfile_detail_footer =

textfile_textwrap = 78

