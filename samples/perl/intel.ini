#
# Copyright (c) 2007 Sun Microystems, Inc.  All rights reserved.
# Copyright (c) 2009 Cisco Systems, Inc.  All rights reserved.
#

#
# This INI file is an addendum to samples/perl/developer.ini (which only
# contains MTT, MPI, and Reporter sections).
#
# Note that there are many items in this file that, while they are
# good for examples, may not work for random MTT users.  For example,
# the "ompi-tests" SVN repository that is used in the examples below
# is *not* a public repository (there's nothing really secret in this
# repository; it contains many publicly-available MPI tests and
# benchmarks, but we have never looked into the redistribution rights
# of these codes, so we keep the SVN repository "closed" to the
# general public and only use it internally in the Open MPI project).
#
# Sample usage:
# cat developer.ini intel.ini | client/mtt - alreadyinstalled_dir=/your/install
#

#----------------------------------------------------------------------

[Test get: intel]
module = SVN
svn_url = https://svn.open-mpi.org/svn/ompi-tests/trunk/intel_tests

#----------------------------------------------------------------------

[Test build: intel]
test_get = intel
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Intel_OMPI_Tests
intel_ompi_tests_buildfile = all_tests_no_perf
# I am using the g77 compiler, which needs these flags.  Your fortran
# compiler may need different flags.
intel_ompi_tests_fflags = -g -fugly-complex -fno-globals -Wno-globals -Isrc -I.

#----------------------------------------------------------------------

[Test run: intel]
test_build = intel
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
skipped = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 77))
timeout = &max(30, &multiply(10, &test_np()))
save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
# The intel tests have some hard limits at 64 processes.  We set
# the limit to 60 to be safe.
np = &min(60, &env_max_procs())

specify_module = Simple
# This group of tests uses the defaults from above and should all
# return an exit status of 0
simple_pass:tests = &find_executables("src")

# This group of tests is from the "supposed_to_fail" file, and is
# exclusive from the other group (meaning that anything in this group
# should be removed from the other group).  The programs in the group
# should also have a nonzero exit status.
simple_fail:tests = &find_executables("src/" . &cat("supposed_to_fail"))
simple_fail:pass = &and(&cmd_wifexited(), &ne(&cmd_wexitstatus(), 0))
# Setting "exclusive" to 1 means that any tests found in this group
# will be removed from all other groups.
simple_fail:exclusive = 1

# These tests sleep for 90 seconds (!) before attempting to process
# any messages.  So give it a really long timeout value.
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(90, &multiply(3, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*.  So
# give it a really long timeout value.
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(30, &test_np()))
