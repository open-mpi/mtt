[MTT]
hostlist = &create_hostlist("witch[21-22]", 4)
description = @hostlist@
logfile =  &scratch_root()/mtt_output.log
submit_group_results=1
drain_timeout=5
min_disk_free=0
ompi_ver=1.3.3
web_url=https://hpc_head.voltaire.com
web_root=&preg_replace(&getenv("HOME"),"~" . &getenv("USER"), &scratch_root())
scratch_url=@web_url@/@web_root@

# Contact Jeff to get username/password to access GDS
gds_user=&shell("head -1 ~/.mtt_auth")
gds_pw=&shell("tail -1 ~/.mtt_auth")
gds_url=http://open-mpi-mtt.appspot.com/
gds_tag=osu_&getenv("USER")
gds_email=&getenv("USER")@voltaire.com

after_mtt_start_exec = <<EOT
#!/bin/bash
@PROGRAM_DIR@/bquery.pl -u @gds_user@ -p @gds_pw@ --server=@gds_url@ --query --gqls="select * from TestRunPhase where tag='@gds_tag@' and test_name='osu_latency'" --dir=&scratch_root()/@gds_tag@

@PROGRAM_DIR@/breport.pl --dir=&scratch_root()/@gds_tag@ --dest=@gds_tag@.xls --title="@gds_tag@" --axis_x=data_message_size --axis_y=data_latency_avg --legend='$test_name-$test_case-$custom_my_dynamic_gds_field' -e @gds_email@
EOT

[VBench]
# place to keep yaml files for mtt results
repository_tempdir=&scratch_root()/gds_data
repository_dirname_prefix=gds


[MPI Details: Open MPI]

exec            = &test_prefix_pretty()/bin/mpirun @hosts@ -np &test_np() @mca@ &test_executable_abspath() &test_argv()
hosts 			= &if(&have_hostfile(), "--hostfile " . &hostfile(),&if(&have_hostlist(), "--host " . &hostlist(), ""))

# Example: how to save in GDS custom field (custom_my_dynamic_gds_field) in the TestResultPhase object
btl_openib		= -mca btl openib,sm,self -x custom_my_dynamic_gds_field=ic-ib
btl_eth1g		= -mca btl tcp,sm,self -x custom_my_dynamic_gds_field=ic-eth1g

mca = &enumerate(\
		"@btl_openib@ -mca mpi_paffinity_alone 1",\
		"@btl_openib@",\
		"@btl_eth1g@ -mca mpi_paffinity_alone 1",\
		"@btl_eth1g@",\
		)


#======================================================================
# Open MPI Vanilla
#======================================================================

[MPI get: Open MPI Vanilla]
mpi_details = Open MPI
module = AlreadyInstalled
alreadyinstalled_dir = /opt/openmpi/&get_ini_val("MTT","ompi_ver")
alreadyinstalled_mpi_type = OMPI


[MPI install: openmpi-vanilla]
mpi_get = Open MPI Vanilla
module = Analyze::OMPI
description = Voltaire already installed MPI

#======================================================================
# Test get phase
#======================================================================

[Test get: dummy]
module = Noop

[Test get: osu]
module = Download
download_url = http://mvapich.cse.ohio-state.edu/benchmarks/OMB-3.1.1.tgz

[Test get: imb]
module = Download
download_url = http://software.intel.com/file/18632
tarball_name = IMB_3.2.tgz.tgz

[Test get: trivial]
module = Trivial

#======================================================================
# Test build phase
#======================================================================

[Test build: dummy]
test_get = dummy
module = Noop

[Test build: osu]
test_get = osu
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
make CC=&test_prefix_pretty()/bin/mpicc
EOT

[Test build: imb]
test_get = imb
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

module = Shell
shell_build_command = <<EOT
cd src
make -f make_ict CC=&test_prefix_pretty()/bin/mpicc clean IMB-MPI1
EOT

[Test build: trivial]
test_get = trivial
module = Trivial



#======================================================================
# Test Run phase
#======================================================================

[Test run]
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
timeout = 60:00
save_stdout_on_pass = 1
merge_stdout_stderr = 1
stdout_save_lines = 100
stderr_save_lines = 100
np = &env_max_procs()
specify_module = Simple

[Test run: trivial]
include_section = Test run

test_build = trivial
skipped = 0

specify_module = Simple
simple_first:tests = &find_executables(".")
vbench:tag = <<EOT
&stringify(@INI_SECTION_NAME@,&getenv("USER"))
@INI_SECTION_NAME@
EOT


[Test run: osu]
include_section = Test run
test_build = osu
simple_pass:tests = osu_bw osu_latency osu_bibw
np = 2
analyze_module = OSU
vbench:tag = <<EOT
&stringify(@INI_SECTION_NAME@,'_',&getenv("USER"))
@INI_SECTION_NAME@
EOT

[Test run: imb]
include_section = Test run
test_build = imb
pass = &eq(&cmd_wexitstatus(), 0)
# Ensure to leave this value as "-1", or performance results could be lost!
stdout_save_lines = -1
simple_pass:tests = src/IMB-MPI1
argv = -npmin &test_np() 
analyze_module = IMB
vbench:tag = <<EOT
&stringify(@INI_SECTION_NAME@,&getenv("USER"))
@INI_SECTION_NAME@
EOT


#======================================================================
# Reporter phase
#======================================================================

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt
textfile_summary_header = <<EOT
hostname: &shell("hostname")
uname: &shell("uname -a")

Detailed report at &get_ini_val("mtt","scratch_url")/All_phase-summary.html
EOT

textfile_summary_footer =
textfile_detail_header =
textfile_detail_footer =
textfile_textwrap = 78
email_to = &get_ini_val("mtt","gds_email")
email_subject = MTT test has completed, status: $overall_mtt_status
email_footer = <<EOT

Test Scratch Directory is &get_ini_val("mtt","scratch_url")/All_phase-summary.html
Test Scratch web url: &get_ini_val("mtt","scratch_url")/
EOT

[Reporter: YAML output]
module = MTTGDS
mttdatabase_realm = OMPI
mttdatabase_username = &get_ini_val("mtt","gds_user")
mttdatabase_password = &get_ini_val("mtt","gds_pw")
mttdatabase_platform = 
mttdatabase_hostname = &shell("hostname")
mttdatabase_url = &get_ini_val("mtt","gds_url")


