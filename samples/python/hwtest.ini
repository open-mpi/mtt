#
# Template MTT configuration file for MTT users.  The intent
# for this template file is to establish at least some loose
# guidelines for what MTT users should be running
# before committing changes to the OMPI repository. This file is not
# intended to be an exhaustive sample of all possible fields and
# values that MTT offers. Each developer will undoubtedly have to
# edit this template for their own needs (e.g., pick compilers to use,
# etc.), but this file provides a baseline set of configurations that
# we intend for you to run.
#
# Sample usage:
#   cat developer.ini intel.ini   | client/mtt - alreadyinstalled_dir=/your/install
#   cat developer.ini trivial.ini | client/mtt - alreadyinstalled_dir=/your/install
#

[MTTDefaults]
trial_run = 0
scratch = /home/common/mttscratch-rsh
submit_group_results = 1
logfile = /home/common/mtt-logfile-rsh.txt
description = Prototype HW test configuration file


#======================================================================
# Firmware update - check the current firmware on the allocated
# nodes and update if required. Each firmware element can be setup
# separately by providing its own stage.
#
# The specified firmware plugin will be given the target model and
# firmware version. The plugin will check to see if the target model
# is present - if it isn't, then the stage will be skipped. If the
# target is present, then the firmware will be flashed to the desired
# version. Note that the firmware will -always- be flashed to ensure
# that the specified version is accurately installed.
#======================================================================

[Firmware]
name = Ethernet NIC
module = tplink
model = tg-3269
version = 1.7.18-32
update_file = /home/common/firmware/tplink/fw1.7.18-32.bin

#======================================================================
# Provision -
#
# The specified firmware plugin will be given the target model and
# firmware version. The plugin will check to see if the target model
# is present - if it isn't, then the stage will be skipped. If the
# target is present, then the firmware will be flashed to the desired
# version. Note that the firmware will -always- be flashed to ensure
# that the specified version is accurately installed.
#======================================================================

[Provision]
name = centos7
module = warewulf
image = centos7
version = 1.1.32


#======================================================================
# Test construction phases - get and build the tests that will be
# run. Note that we can also run stressors on the system while the
# tests are executing.
#======================================================================

[TestGet]
name = IBM
module = SCM
scm_module = Git
scm_url =  /home/common/ompi-tests
scm_subdir = ibm


#----------------------------------------------------------------------

[TestGet]
name = Intel
module = SCM
scm_module = Git
scm_url =  /home/common/ompi-tests
scm_subdir = intel_tests


#----------------------------------------------------------------------

[TestGet]
name = onesided
module = SCM
scm_module = Git
scm_url =  /home/common/ompi-tests
scm_subdir = onesided
pre_config_cmd = "./autogen.sh"

#----------------------------------------------------------------------

[TestGet]
name = orte
module = SCM
scm_module = Git
scm_url =  /home/common/ompi-tests
scm_subdir = orte

#
#======================================================================
# Test build phase
#======================================================================

[TestBuild]
name = Trivial
test_get = trivial
save_stdout_on_success = 1
merge_stdout_stderr = 1

target_install = My Installation

module = Trivial

#----------------------------------------------------------------------

[TestBuild]
name = IBM
test_get = ibm
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

target_install = My Installation

module = Shell
pre_config_cmd = "./autogen.sh"
config_cmd = "./configure CC=mpicc CXX=mpic++ F77=mpif77"
build_cmd = "make -j 10"


#----------------------------------------------------------------------

[TestBuild]
name = Intel
test_get = intel
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

mpi_install = My Installation

module = Intel_OMPI_Tests
intel_ompi_tests_buildfile = all_tests_no_perf
#----------------------------------------------------------------------

[TestBuild]
name = OneSided
test_get = onesided
save_stdout_on_success = 1
merge_stdout_stderr = 1
stderr_save_lines = 100

mpi_install = My Installation

module = Shell
config_cmd = "./configure"
build_cmd = "make -j 10"

#----------------------------------------------------------------------

[TestBuild]
name = Java
test_get = java
save_stdout_on_success = 1
merge_stdout_stderr = 1

mpi_install = My Installation

module = Shell
config_cmd = "./configure"
build_cmd = "make -j 10"

#----------------------------------------------------------------------

[TestBuild]
name = ORTE
test_get = orte
save_stdout_on_success = 1
merge_stdout_stderr = 1

module = Shell
build_cmd = "make"

#
#======================================================================
# Test run phase - the executor will automatically change directory to
# the top directory where the tests were installed, so any search for
# executables will take place relative to that point
#======================================================================
#----------------------------------------------------------------------

[TestRun]
name = Trivial
module = Simple
test_build = Trivial
timeout = max(10, np)
find_test_dir = "."

#----------------------------------------------------------------------

[TestRun]
name = IBM Test Suite
test_build = IBM
timeout = 600

find_test_dir = "collective, communicator, datatype, environment, group, info, io, onesided, pt2pt, random, topology"

# Tests that are supposed to fail
fail_tests = "environment/abort, environment/final"
fail_timeout = max_procs

#
# THREAD_MULTIPLE test will fail with the openib btl because it
# deactivates itself in the presence of THREAD_MULTIPLE.  So just skip
# it.  loop_child is the target for loop_spawn, so we don't need to
# run it (although it'll safely pass if you run it by itself).
skip_tests = "environment/init_thread_multiple,communicator/comm_split_f"

#----------------------------------------------------------------------
[TestRun]
name = Spawn
test_build = ibm
timeout = 600
np = 3

find_test_dir = "dynamic"
simple_skip:tests = dynamic/loop_child dynamic/loop_spawn
simple_skip:exclusive = 1
simple_skip:do_not_run = 1

#----------------------------------------------------------------------
[Test run: loopspawn]
include_section = Test run

test_build = ibm
timeout = 1200
pass = &and(&cmd_wifexited(), &eq(&cmd_wexitstatus(), 0))
np = 1

specify_module = Simple

simple_first:tests = dynamic/loop_spawn

#------------------------------------------------------------------------

[Test run: intel]
include_section = Test run

test_build = intel
timeout = 600
np = 16

specify_module = Simple
simple_successful:tests = &find_executables("src")

simple_failures:tests = &find_executables(&prepend("src/", &cat("supposed_to_fail")))
simple_failures:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_failures:exclusive = 1
simple_failures:timeout = &env_max_procs()

# These tests sleep for 90 seconds (!) before attempting to process
# any messages
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(180, &multiply(5, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(35, &test_np()))

#------------------------------------------------------------------------

[Test run: intel_skip]
include_section = Test run

test_build = intel
timeout = 300
np = 4

specify_module = Simple
simple_successful:tests = &find_executables("src")

simple_failures:tests = &find_executables(&prepend("src/", &cat("supposed_to_fail")))
simple_failures:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))
simple_failures:exclusive = 1
simple_failures:timeout = &env_max_procs()

# These tests sleep for 90 seconds (!) before attempting to process
# any messages
simple_really_slow:tests = src/MPI_Isend_flood_c src/MPI_Send_flood_c
simple_really_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_really_slow:exclusive = 1
simple_really_slow:timeout = &sum(180, &multiply(5, &test_np()))

# This test collectively sleeps for 26 seconds *per MCW rank*
simple_coll_slow:tests = src/MPI_collective_overlap_c
simple_coll_slow:pass = &and(&test_wifexited(), &eq(&test_wexitstatus(), 0))
simple_coll_slow:exclusive = 1
simple_coll_slow:timeout = &multiply(35, &test_np()))

#----------------------------------------------------------------------

[Test run: onesided]
include_section = Test run
test_build = onesided

specify_module = Simple
np = &if(&gt(&env_max_procs(), 0), &step(2, &max(2, &env_max_procs()), 2), 2)

simple_pass:tests = &cat("run_list")

#------------------------------------------------------------------------

[Test run: orte]
include_section = Test run

test_build = orte
skipped = 0
timeout = 60

specify_module = Simple

# Tests that are supposed to pass
simple_pass:tests = &find_executables("pass")

# Tests that are supposed to fail
simple_fail:tests = &find_executables("fail")
simple_fail:pass = &and(&test_wifexited(), &ne(&test_wexitstatus(), 0))

#======================================================================
# Reporter phase
#======================================================================

[Reporter: IU database]
module = MTTDatabase

mttdatabase_realm = OMPI
mttdatabase_username = intel
mttdatabase_password = &stringify(&cat("/home/common/mttpwd.txt"))
mttdatabase_platform = bend-rsh
mttdatabase_hostname = &env_hosts()
mttdatabase_url = https://mtt.open-mpi.org/submit/
mttdatabase_debug_filename = mttdb_debug_file
mttdatabase_keep_debug_files = 1
mttdatabase_debug_server = 1

#----------------------------------------------------------------------

[Reporter: text file backup]
module = TextFile

textfile_filename = $phase-$section-$mpi_name-$mpi_version.txt

# User-defined report headers/footers
#textfile_summary_header = <<EOT
#hostname: &shell("hostname")
#uname: &shell("uname -a")
#who am i: &shell("who am i")
#EOT

textfile_summary_footer =
textfile_detail_header  =
textfile_detail_footer  =

textfile_textwrap = 78
